generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  phone               String?
  address             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  documents           Document[]
  invoices            Invoice[]
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  notifications       Notification[]
  payments            Payment[]
  properties          Property[]           @relation("PropertyToTenant")

  @@map("tenants")
}

model Property {
  id                  String               @id @default(uuid())
  address             String
  type                String
  size                Float?
  bedrooms            Int?
  bathrooms           Float?
  amenities           String[]
  status              String               @default("VACANT")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  documents           Document[]
  invoices            Invoice[]
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  notifications       Notification[]
  tenants             Tenant[]             @relation("PropertyToTenant")

  @@map("properties")
}

model Invoice {
  id          String    @id @default(uuid())
  tenantId    String
  propertyId  String
  amount      Float
  paidAmount  Float     @default(0)
  dueDate     DateTime
  status      String    @default("UNPAID")
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  property    Property  @relation(fields: [propertyId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  payments    Payment[]

  @@map("invoices")
}

model Payment {
  id          String   @id @default(uuid())
  invoiceId   String
  tenantId    String
  amount      Float
  status      String   @default("PENDING")
  paymentDate DateTime @default(now())
  method      String
  reference   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@map("payments")
}

model LeaseAgreement {
  id              String   @id @default(uuid())
  tenantId        String
  propertyId      String
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  terms           String?
  status          String   @default("ACTIVE")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  property        Property @relation(fields: [propertyId], references: [id])
  tenant          Tenant   @relation(fields: [tenantId], references: [id])

  @@map("lease_agreements")
}

model MaintenanceRequest {
  id          String   @id @default(uuid())
  propertyId  String
  tenantId    String
  type        String
  priority    String
  status      String   @default("PENDING")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  property    Property @relation(fields: [propertyId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@map("maintenance_requests")
}

model Document {
  id         String    @id @default(uuid())
  type       String
  filePath   String
  fileName   String
  uploadDate DateTime  @default(now())
  status     String    @default("ACTIVE")
  tenantId   String?
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("documents")
}

model Notification {
  id         String    @id @default(uuid())
  type       String
  message    String
  read       Boolean   @default(false)
  priority   String    @default("NORMAL")
  createdAt  DateTime  @default(now())
  tenantId   String?
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("notifications")
}
