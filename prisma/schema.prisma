generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -- ENUMS --

enum RoleType {
  OWNER
  PROPERTY_MANAGER
  TENANT
  MAINTENANCE_STAFF
  ADMIN
}

enum PermissionType {
  MANAGE_PROPERTIES
  MANAGE_TENANTS
  MANAGE_LEASES
  MANAGE_PAYMENTS
  MANAGE_MAINTENANCE
  VIEW_FINANCIALS
  MANAGE_ORG
  VIEW_AUDIT_LOG
  COMMUNICATE
  MANAGE_SITE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  CHECK
  OTHER
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum DocumentType {
  LEASE_AGREEMENT
  ID
  PROOF_OF_INSURANCE
  RECEIPT
  OTHER
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_RECEIVED
  LEASE_SIGNED
  MAINTENANCE_UPDATE
  GENERAL
}

enum LeaseStatus {
  ACTIVE
  TERMINATED
  EXPIRED
  PENDING
}

enum FeedEventType {
  PAYMENT
  MAINTENANCE
  LEASE
  SYSTEM
  GENERAL
}

enum Currency {
  USD
  EUR
  GBP
}

// -- ORGANIZATION + USER --

model Organization {
  id         String     @id @default(uuid())
  name       String     @unique
  currency   Currency   @default(USD)
  timezone   String?
  properties Property[]
  users      User[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  id             String                @id @default(uuid())
  email          String                @unique
  name           String?
  password       String?
  locale         String?
  phone          String?
  image          String?
  organizationId String?
  roleId         String?
  role           Role?                 @relation(fields: [roleId], references: [id])
  permissions    UserPermission[]
  managedProps   PropertyManager[]
  leases         Tenant[]
  maintenanceAssigned MaintenanceRequest[]  @relation("AssignedRequests")
  chatSent       ChatMessage[]         @relation("Sender")
  chatReceived   ChatMessage[]         @relation("Recipient")
  notifications  Notification[]
  auditLogs      AuditLog[]
  reviews        Review[]              @relation("Reviewer")
  webhookSubs    WebhookSubscription[]
  transactions   Transaction[]
  documents      Document[]            @relation("Uploader")
  changeHistory  ChangeHistory[]
  organization   Organization?         @relation(fields: [organizationId], references: [id])
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  address        String?
  isVerified     Boolean               @default(false)
  lastLogin      DateTime?
  preferences    Json?
  ownedProperties Property[]           @relation("PropertyOwner")
  payments       Payment[]
  maintenanceRequests MaintenanceRequest[] @relation("MaintenanceTenant")
  feedEvents     FeedEvent[]
}

model Role {
  id          String           @id @default(uuid())
  name        RoleType         @unique
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id    String           @id @default(uuid())
  name  PermissionType   @unique
  roles RolePermission[]
  users UserPermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

// -- PROPERTIES, LEASES, TENANTS, MANAGERS --

model Property {
  id             String               @id @default(uuid())
  organizationId String
  ownerId        String?
  address        String
  unit           String?
  city           String?
  state          String
  zip            String
  country        String
  managers       PropertyManager[]
  tenants        Tenant[]
  leases         Lease[]
  maintenance    MaintenanceRequest[] @relation("MaintenanceProperty")
  documents      Document[]
  reviews        Review[]             @relation("PropertyReviews")
  vendorJobs     MaintenanceRequest[] @relation("PropertyVendorJobs")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organization   Organization         @relation(fields: [organizationId], references: [id])
  owner          User?                @relation("PropertyOwner", fields: [ownerId], references: [id])
  payments       Payment[]
  transactions   Transaction[]
  chatMessages   ChatMessage[]

  @@unique([organizationId, address])
}

model PropertyManager {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model Tenant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  propertyId String
  leaseId   String?  // Optional

  user      User     @relation(fields: [userId], references: [id])
  property  Property @relation(fields: [propertyId], references: [id])
  lease     Lease?

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  @@index([leaseId])
}

// -- LEASES + LEASE TERMS --

model Lease {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  propertyId    String
  tenantId      String        @unique
  status        String
  rentAmount    Float
  currency      String
  startDate     DateTime
  endDate       DateTime
  deposit       Float
  addendums     Json?

  property      Property       @relation(fields: [propertyId], references: [id])
  tenant        Tenant         @relation(fields: [tenantId], references: [id])

  payments      Payment[]
  terms         LeaseTerm[]
  documents     Document[]
  notifications Notification[]
  chat          ChatMessage[]
  reviews       Review[]       @relation("LeaseReviews")

  @@index([propertyId])
  @@index([tenantId])
}

model LeaseTerm {
  id         String   @id @default(uuid())
  leaseId    String
  startDate  DateTime
  endDate    DateTime
  rentAmount Decimal
  notes      String?
  lease      Lease    @relation(fields: [leaseId], references: [id])
}

// -- PAYMENTS + TRANSACTIONS --

model Payment {
  id         String    @id @default(uuid())
  leaseId    String?
  propertyId String
  tenantId   String
  amount     Decimal
  status     PaymentStatus
  method     PaymentMethod?
  dueDate    DateTime
  paidAt     DateTime?
  receiptUrl String?
  autoPay    Boolean   @default(false)
  lateFee    Decimal?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lease      Lease?    @relation(fields: [leaseId], references: [id])
  property   Property  @relation(fields: [propertyId], references: [id])
  tenant     User      @relation(fields: [tenantId], references: [id])
  transactions Transaction[]

  @@unique([leaseId, propertyId, tenantId])
}

model Transaction {
  id         String    @id @default(uuid())
  type       String    // "RENT", "DEPOSIT", "FEE"
  amount     Decimal
  userId     String?
  propertyId String?
  paymentId  String?
  createdAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])
  payment    Payment?  @relation(fields: [paymentId], references: [id])
}

// -- MAINTENANCE + VENDORS --

model MaintenanceRequest {
  id          String            @id @default(uuid())
  propertyId  String
  tenantId    String
  assignedTo  String?
  vendorId    String?
  type        String
  status      MaintenanceStatus @default(PENDING)
  description String
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  property    Property          @relation("MaintenanceProperty", fields: [propertyId], references: [id], map: "MaintenanceRequest_property_maintenance_fkey")
  tenant      User              @relation("MaintenanceTenant", fields: [tenantId], references: [id])
  assignee    User?             @relation("AssignedRequests", fields: [assignedTo], references: [id])
  vendor      Vendor?           @relation("VendorJobs", fields: [vendorId], references: [id])
  propertyVendor Property?      @relation("PropertyVendorJobs", fields: [propertyId], references: [id], map: "MaintenanceRequest_property_vendor_fkey")

  @@unique([propertyId, tenantId])
}

model Vendor {
  id      String               @id @default(uuid())
  name    String
  contact String?
  rating  Float?
  jobs    MaintenanceRequest[] @relation("VendorJobs")
  reviews Review[]             @relation("VendorReviews")
}

// -- DOCUMENT + FILES --

model Document {
  id         String       @id @default(uuid())
  uploadedBy String
  propertyId String?
  leaseId    String?
  type       DocumentType
  fileUrl    String
  fileName   String
  status     String       @default("ACTIVE")
  uploadedAt DateTime     @default(now())
  property   Property?    @relation(fields: [propertyId], references: [id])
  lease      Lease?       @relation(fields: [leaseId], references: [id])
  uploader   User         @relation("Uploader", fields: [uploadedBy], references: [id])
}

// -- CHAT + MESSAGING --

model ChatMessage {
  id            String    @id @default(uuid())
  fromUserId    String
  toUserId      String
  leaseId       String?
  propertyId    String?
  message       String
  attachmentUrl String?
  createdAt     DateTime  @default(now())
  fromUser      User      @relation("Sender", fields: [fromUserId], references: [id])
  toUser        User      @relation("Recipient", fields: [toUserId], references: [id])
  lease         Lease?    @relation(fields: [leaseId], references: [id])
  property      Property? @relation(fields: [propertyId], references: [id])
}

// -- AUDIT LOG + HISTORY --

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String // "PAID_RENT", "UPDATED_LEASE"
  targetId  String? // Related Lease/Payment/MaintenanceRequest ID
  meta      Json?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ChangeHistory {
  id        String   @id @default(uuid())
  model     String // 'Lease'
  modelId   String // Lease ID
  field     String
  oldValue  String?
  newValue  String?
  changedBy String
  changedAt DateTime @default(now())
  user      User     @relation(fields: [changedBy], references: [id])
}

// -- NOTIFICATIONS, EVENTS, REVIEWS --

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  body      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
  leaseId   String?
  lease     Lease?           @relation(fields: [leaseId], references: [id])
}

model FeedEvent {
  id        String        @id @default(uuid())
  type      FeedEventType
  userId    String
  relatedId String?
  payload   Json?
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

// Polymorphic reviews: tenant->property, tenant->vendor, etc.
model Review {
  id         String   @id @default(uuid())
  reviewerId String
  targetType String // "Property", "Vendor", "Lease"
  targetId   String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  // Only one of these should be non-null for each review:
  property   Property? @relation("PropertyReviews", fields: [targetId], references: [id], map: "Review_property_targetId_fkey")
  vendor     Vendor?   @relation("VendorReviews", fields: [targetId], references: [id], map: "Review_vendor_targetId_fkey")
  lease      Lease?    @relation("LeaseReviews", fields: [targetId], references: [id], map: "Review_lease_targetId_fkey")
}

// -- INTEGRATIONS + WEBHOOKS --

model WebhookSubscription {
  id         String   @id @default(uuid())
  url        String
  eventTypes String[]
  userId     String
  isActive   Boolean  @default(true)
  user       User     @relation(fields: [userId], references: [id])
}
